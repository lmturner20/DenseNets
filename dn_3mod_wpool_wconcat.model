#this model has three modules that are separated by pooling layers
#this model has concat layers


# "/home/dkoes/PDBbind/refined-set" - use on Apogee/Perigee
# "/net/pulsar/home/koes/dkoes/PDBbind/refined-set" - use on the Cluster

layer {
  name: "data"
  type: "MolGridData"
  top: "data"
  top: "label"
  top: "affinity"
  include {
    phase: TEST
  }
  molgrid_data_param {
    source: "TESTFILE"
    batch_size: 10
    dimension: 23.5
    resolution: 0.5
    shuffle: false
    balanced: false
    has_affinity: true
    root_folder: "/net/pulsar/home/koes/dkoes/PDBbind/refined-set"
  }
}

layer {
  name: "data"
  type: "MolGridData"
  top: "data"
  top: "label"
  top: "affinity"
  include {
    phase: TRAIN
  }
  molgrid_data_param {
    source: "TRAINFILE"
    batch_size:  50
    dimension: 23.5
    resolution: 0.5
    shuffle: true
    balanced: true
    stratify_receptor: true
    stratify_affinity_min: 0
    stratify_affinity_max: 0
    stratify_affinity_step: 0
    has_affinity: true
    random_rotation: true
    random_translate: 2
    root_folder: "/net/pulsar/home/koes/dkoes/PDBbind/refined-set"
  }
}

layer {
  name: "unit1_pool"
  type: "Pooling"
  bottom: "data"
  top: "unit1_pool"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "unit1_conv1"
  type: "Convolution"
  bottom: "unit1_pool"
  top: "unit1_conv1"
  convolution_param {
    num_output: 32
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "unit1_norm"
  type: "LRN"
  bottom: "unit1_conv1"
  top: "unit1_conv1"
}

layer {
 name: "unit1_scale"
 type: "Scale"
 bottom: "unit1_conv1"
 top: "unit1_conv1"
 scale_param {
  bias_term: true
 }
}

layer {
  name: "unit1_func"
  type: "ELU"
  bottom: "unit1_conv1"
  top: "unit1_conv1"
}

layer {
  name: "unit2_conv1"
  type: "Convolution"
  bottom: "unit1_conv1"
  top: "unit2_conv1"
  convolution_param {
    num_output: 32
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "unit2_norm"
  type: "LRN"
  bottom: "unit2_conv1"
  top: "unit2_conv1"
}

layer {
 name: "unit2_scale"
 type: "Scale"
 bottom: "unit2_conv1"
 top: "unit2_conv1"
 scale_param {
  bias_term: true
 }
}

layer {
  name: "unit2_func"
  type: "ELU"
  bottom: "unit2_conv1"
  top: "unit2_conv1"
}

layer {
  name: "concat1_conv1"
  bottom: "unit1_conv1"
  bottom: "unit2_conv1"
  top: "concat1_conv1"
  type: "Concat"
  concat_param {
    axis: 1
  }
}

layer {
  name: "unit3_conv1"
  type: "Convolution"
  bottom: "unit2_conv1"
  top: "unit3_conv1"
  convolution_param {
    num_output: 32
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "unit3_norm"
  type: "LRN"
  bottom: "unit3_conv1"
  top: "unit3_conv1"
}

layer {
 name: "unit3_scale"
 type: "Scale"
 bottom: "unit3_conv1"
 top: "unit3_conv1"
 scale_param {
  bias_term: true
 }
}

layer {
  name: "unit3_func"
  type: "ELU"
  bottom: "unit3_conv1"
  top: "unit3_conv1"
}

layer {
  name: "unit2_pool"
  type: "Pooling"
  bottom: "unit3_conv1"
  top: "unit2_pool"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

#second module
layer {
  name: "unit1_conv2"
  type: "Convolution"
  bottom: "unit3_conv1"
  top: "unit1_conv2"
  convolution_param {
    num_output: 32
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "unit1_norm2"
  type: "LRN"
  bottom: "unit1_conv2"
  top: "unit1_conv2"
}

layer {
 name: "unit1_scale2"
 type: "Scale"
 bottom: "unit1_conv2"
 top: "unit1_conv2"
 scale_param {
  bias_term: true
 }
}

layer {
  name: "unit1_func2"
  type: "ELU"
  bottom: "unit1_conv2"
  top: "unit1_conv2"
}

layer {
  name: "unit2_conv2"
  type: "Convolution"
  bottom: "unit1_conv2"
  top: "unit2_conv2"
  convolution_param {
    num_output: 32
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "unit2_norm2"
  type: "LRN"
  bottom: "unit2_conv2"
  top: "unit2_conv2"
}

layer {
 name: "unit2_scale2"
 type: "Scale"
 bottom: "unit2_conv2"
 top: "unit2_conv2"
 scale_param {
  bias_term: true
 }
}

layer {
  name: "unit2_func2"
  type: "ELU"
  bottom: "unit2_conv2"
  top: "unit2_conv2"
}

layer {
  name: "concat1_conv2"
  bottom: "unit1_conv2"
  bottom: "unit2_conv2"
  top: "concat1_conv2"
  type: "Concat"
  concat_param {
    axis: 1
  }
}

layer {
  name: "unit3_conv2"
  type: "Convolution"
  bottom: "unit2_conv2"
  top: "unit3_conv2"
  convolution_param {
    num_output: 32
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "unit3_norm2"
  type: "LRN"
  bottom: "unit3_conv2"
  top: "unit3_conv2"
}

layer {
 name: "unit3_scale2"
 type: "Scale"
 bottom: "unit3_conv2"
 top: "unit3_conv2"
 scale_param {
  bias_term: true
 }
}

layer {
  name: "unit3_func2"
  type: "ELU"
  bottom: "unit3_conv2"
  top: "unit3_conv2"
}

layer {
  name: "unit3_pool"
  type: "Pooling"
  bottom: "unit3_conv2"
  top: "unit3_pool"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

#third module
layer {
  name: "unit1_conv3"
  type: "Convolution"
  bottom: "unit3_conv2"
  top: "unit1_conv3"
  convolution_param {
    num_output: 32
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "unit1_norm3"
  type: "LRN"
  bottom: "unit1_conv3"
  top: "unit1_conv3"
}

layer {
 name: "unit1_scale3"
 type: "Scale"
 bottom: "unit1_conv3"
 top: "unit1_conv3"
 scale_param {
  bias_term: true
 }
}

layer {
  name: "unit1_func3"
  type: "ELU"
  bottom: "unit1_conv3"
  top: "unit1_conv3"
}

layer {
  name: "unit2_conv3"
  type: "Convolution"
  bottom: "unit1_conv3"
  top: "unit2_conv3"
  convolution_param {
    num_output: 32
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "unit2_norm3"
  type: "LRN"
  bottom: "unit2_conv3"
  top: "unit2_conv3"
}

layer {
 name: "unit2_scale3"
 type: "Scale"
 bottom: "unit2_conv3"
 top: "unit2_conv3"
 scale_param {
  bias_term: true
 }
}

layer {
  name: "unit2_func3"
  type: "ELU"
  bottom: "unit2_conv3"
  top: "unit2_conv3"
}

layer {
  name: "concat1_conv3"
  bottom: "unit1_conv3"
  bottom: "unit2_conv3"
  top: "concat1_conv3"
  type: "Concat"
  concat_param {
    axis: 1
  }
}

layer {
  name: "unit3_conv3"
  type: "Convolution"
  bottom: "unit2_conv3"
  top: "unit3_conv3"
  convolution_param {
    num_output: 32
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "unit3_norm3"
  type: "LRN"
  bottom: "unit3_conv3"
  top: "unit3_conv3"
}

layer {
 name: "unit3_scale3"
 type: "Scale"
 bottom: "unit3_conv3"
 top: "unit3_conv3"
 scale_param {
  bias_term: true
 }
}

layer {
  name: "unit3_func3"
  type: "ELU"
  bottom: "unit3_conv3"
  top: "unit3_conv3"
}

layer {
  name: "unit4_pool"
  type: "Pooling"
  bottom: "unit3_conv3"
  top: "unit4_pool"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
    name: "split"
    type: "Split"
    bottom: "unit2_pool"
    top: "split"
}

layer {
  name: "output_fc"
  type: "InnerProduct"
  bottom: "split"
  top: "output_fc"
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "output_fc"
  bottom: "label"
  top: "loss"
}

layer {
  name: "output"
  type: "Softmax"
  bottom: "output_fc"
  top: "output"
}

layer {
  name: "labelout"
  type: "Split"
  bottom: "label"
  top: "labelout"
  include {
    phase: TEST
  }
}

layer {
  name: "output_fc_aff"
  type: "InnerProduct"
  bottom: "split"
  top: "output_fc_aff"
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "xavier"
    }
  }
}

layer {
  name: "rmsd"
  type: "AffinityLoss"
  bottom: "output_fc_aff"
  bottom: "affinity"
  top: "rmsd"
  affinity_loss_param {
    scale: 0.1
    gap: 1
    penalty: 0
    pseudohuber: true
    delta: 4
  }
}

layer {
  name: "predaff"
  type: "Flatten"
  bottom: "output_fc_aff"
  top: "predaff"
}

layer {
  name: "affout"
  type: "Split"
  bottom: "affinity"
  top: "affout"
  include {
    phase: TEST
  }
}
